
负载均衡
	location块:
		表达式类型:
			~ 表示正则匹配,区分大小写
			~* 表示正则匹配,不区分大小写
			^~ 普通字符前缀匹配,如果匹配成则不再继续匹配
			=	普通字符精确匹配
			
		表达式优先级:
			第一优先级: "="精确匹配,一旦匹配成功,不在继续匹配
			第二优先级: "^~" 普通字符匹配,一旦匹配成功,不再匹配
			第三优先级: "~"和"~*"正则表达式,如果多个location正则匹配,优先匹配最长
			第四优先级: 常规字符串匹配
			
			server {
			  listen 80;
			  server_name localhost;
			  location / {
			    return 410;
			  }
			  location = / {
			    return 411;
			  }
			  location = /index.html {
			    return 412;
			  }
			  location /name/ {
			    return 413;
			  }
			  location ^~ /images/ {
			    return 414;
			  }
			  location ~ \. (jpg|png|gif)$ {
			    return 415;
			  }
			  location ~* \. jpg$ {
			    return 416;
			  }
			}
	
	
URL Rewrite(URL重定向及其他常用指令)
	rewrite指令:
		rewrite：匹配URI,根据定义的规则对其重写或改变.

		语法:
			rewrite regex replacement [flag]
			regex：正则表达式匹配请求的URI
			replacement：替换后的URI或URL;如果替换字符串以http、https或$scheme开头,则匹配终止,并返回客户端
			flag：标志,参数如下：
				last 		#停止处理后面rewrite指令,并用替换后的URI重新发起一次请求,再一次匹配location
				break	 	#停止处理后面rewrite指令
				redirect 	#临时重定向,返回302状态码
				permanent 	#永久重定向,返回301状态码
				
	return指令:
		return：停止处理并返回指定状态码给客户端
		语法：
			return code [text]
			return code URL
			return URL
		参数说明：
			code #HTTP状态码
			text #响应正文
			URL  #临时重定向地址
			
	set指令:
		set：设置变量
		语法：
			set $variable value
			
	if指令:
		if: 条件判断
		语法:
			if (condition) {…}
			condition可以是以下任何一种:
				a.一个变量名,如果变量的值为空或0,则为false.
				b.使用”=”和”!= ”运算符比较变量与字符.
				c.使用”~”(区分大小写匹配)和” ~*”(不区分大小写匹配)运算符,将变量与正则表达式进行匹配.正则表达式可以是分组匹配,使用$1…$9引用捕获的值.也可以用” !~”和”!~*”取反.如果正则表达式包含” }”或” ;”字符,则整个表达式用单引号或双引号括起来.
				d.使用” -f”和” !-f”操作符检查文件存在.
				e.使用” -d”和” !-d”操作符检查目录存在.
				f.使用” -e”和” !-d”操作符检查文件、目录或符号链接存在.
				g.使用” -x”和” !-x”运算符检查可执行文件.
		
	常用正则表达式符号:
		.   #匹配除换行符(\n)以外的任意单个字符
		*   #匹配字符0个或多个
		+   #匹配字符1个或多个
		?   #匹配字符0个或1个
		^   #匹配后面字符开头
		^   #匹配后面字符开头
		$   #匹配前面字符结尾
		{n} #匹配花括号前面字符至少n个字符
		{n,m}  #匹配花括号前面字符至少n个字符,最多m个字符
		[ ]	   #匹配中括号中的任意一个字符
		[a-z]  #匹配a-z范围内的任意一个字母
		[0-9]  #匹配0-9范围内的任意一个数字
		|      #匹配竖杠两边的任意一个
		( )    #分组匹配,通过$1...$9反向引用
		\      #转义符,将特殊符号转成原有意义
		\d     #匹配数字,等效[0-9]
	
	

安全配置:
	HTTPS:
		HTTPS是什么:
			HTTPS(Hyper Text Transfer Protocol over Secure Socket Layer),是以安全为目的的HTTP通道,简单讲是HTTP的安全版.
			HTTPS由两部分组成：HTTP+SSL/TLS
			TLS前身是SSL,TLS1.0对应SSL3.1,TLS1.1对应SSL3.2,TLS1.2对应SSL3.3.

		为什么要用HTTPS:
			主要防止数据泄密和篡改.
			
		HTTPS工作原理:
			1.浏览器向服务器443端口发送HTTP请求;
			2.服务器收到请求将数字证书返回给浏览器;
			3.浏览器验证证书是否有效,如果不可信任,提示https无效警告;如果证书可信任,则取出里面公钥生成一个随机值,用这个公钥对随机值加密,然后发送给服务器;
			4.服务器收到数据后,用私钥解密,得到随机值,然后生成会话密钥,并把请求的内容与会话密钥一同返回给浏览器;
			5.浏览器收到数据后用之前的私钥解密,获得网页内容并展示;
			6.客户端与服务器通信则用这个会话钥匙进行加解密.
		
		OpenSSL自签证书:
			1、创建CA证书
				openssl req -newkey rsa:4096 -nodes -sha256 -keyout ca.key -x509 -days 365 -out ca.crt

			2、创建一个证书签名请求
				openssl req -newkey rsa:4096 -nodes -sha256 -keyout yourdomain.com.key -out yourdomain.com.csr

			3、创建域名证书
				openssl x509 -req -days 365 -in yourdomain.com.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out yourdomain.com.crt

		Nginx配置HTTPS及优化:
			Nginx配置HTTPS:
				server {
				  listen 443 ssl;
				  server_name www.nextdevops.cn;
				  ssl_certificate ../crt/www.nextdevops.cn.crt;
				  ssl_certificate_key ../crt/www.nextdevops.cn.key;
				  
				  location / {
				    index index.html;
					root /opt/test;
				  }
				}
			
			Nginx对HTTPS配置优化:
				http {
				  ssl_session_cache shared:SSL:10m;
				  ssl_session_timeout 10m;
				  server {
				    listen  443 ssl;
					server_name  www.example.com;
					keepalive_timeout  70;
					
					ssl_certificate  www.example.com.crt;
					ssl_certificate_key  wwww.example.com.key;
					ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
					ssl_ciphers  HIGH:!aNULL:!MD5;
					...
				  }
				}
			
		SNI是什么:
			在发起SSL握手请求时,允许客户端携带Host信息
		
		
	防盗链:
		referer:
			ngx_http_referer_module模块用于在referer请求头字段阻止无效的值请求
			
			示例:
			  location ~* \.(gif|jpg|png|mp4)$ {
			    vaild_referers none blocked server_names
				  *.nextdevops.cn nextdevops.* www.example.org/images/
				  ~\.google\. ~\.baidu\.;
				
				if ($invaild_referer) {
				  return 403;
				}
			  }
		
		secure_link模块
			ngx_http_secure_link_modle模块用于检测请求连接的真伪,保护资源未授权访问,并限制连接.
			
			该模块提供两种操作模式:
				a) secure_link和secure_link_md5指令启用,定义URL传参的变量,从中提取md5值及有效期进行比对
				b) secure_link_secret指令启用,检查请求连接的真实性
				
			示例1:
			  location /download/ {
			    secure_link $arg_md5,$arg_expires;
				secure_link_md "$secure_link_expires$uri secret";
				if ($secure_link = "") {
				  return 403;
				}
				if ($secure_link = "0") {
				  return 410;
				}
				...
			  }

			示例2:
			  location /p/ {
			    secure_link_secret secret;
				if ($secure_link = "") {
				  return 403;
				}
				rewrite ^ /secure/$secure_link;
			  }
			  location /secure/ {
			    root html;
				internal;
			  }


	访问控制:
		IP白名单:
			示例:
			  location / {
			    deny 192.168.1.1;
				allow 192.168.1.0/24;
				allow 10.1.1.0/16;
				deny all;
			  }
			 
			
		HTTP身份认证:
			示例:
			  server {
			    listen 88;
				server_name localhost;
				index index.hml;
				root /opt/test;
				
				location / {
				  auth_basic "Please enter user name and password";
				  auth_basic_user_file ../conf/passwd.db;
				}
			  }


	限流:
		limit_conn:
			ngx_http_limit_conn_module模块用于限定每个定义的key的连接数,主要是单个IP地址的并发连接数
			
			示例:
			  http {
			    limit_conn_zone $binary_remote_addr zone=addr:10m;
				limit_conn_log_level error;
				limit_conn_status 503;
				...
				server {
				  ...
				  location /limit {
				    limit_conn addr 1;
				  }
				}
			  }
			  
		limit_req:
			ngx_http_limit_req_module模块用于限制每个定义的key请求处理速率,主要是从一个单一的IP地址请求的处理速率
			
			示例:
			  http {
			    limit_req_zone $binary_remote_addr zone=qps:10m rate=1r/s;
				limit_conn_log_level error;
				limit_conn_status 503;
				...
				server {
				  ...
				  location /search/ {
				    limit_req zone=qps burst=5;
					...
				  }
				}
			  }
			  
		压力测试:
			采用ab压力测试工具分别验证limit_conn和limit_req
		
		
	Nginx平滑升级:
		1).编译新版本
			cd nginx-1.13.4
			./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_geoip_module --with-http_sub_module --with-stream=dynamic --with-http_stub_status_module
			make
		2).重命名执行文件
			mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old
		3).复制编译的执行文件
			cp objs/nginx /usr/local/nginx/sbin/nginx
		4).平滑生效可执行文件
			kill -USR2 `cat /usr/local/nginx/logs/nginx.pid`
		5).正常关闭老进程
			kill -QUIT `cat /usr/local/nginx/logs/nginx.pid.oldbin`
